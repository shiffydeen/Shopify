{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/commondir@1.0.1/node_modules/commondir/index.js", "../../cli-kit/src/public/node/path.ts", "../../../node_modules/.pnpm/pathe@1.1.2/node_modules/pathe/dist/index.mjs", "../../../node_modules/.pnpm/pathe@1.1.2/node_modules/pathe/dist/shared/pathe.ff20891b.mjs"],
  "sourcesContent": ["var path = require('path');\n\nmodule.exports = function (basedir, relfiles) {\n    if (relfiles) {\n        var files = relfiles.map(function (r) {\n            return path.resolve(basedir, r);\n        });\n    }\n    else {\n        var files = basedir;\n    }\n    \n    var res = files.slice(1).reduce(function (ps, file) {\n        if (!file.match(/^([A-Za-z]:)?\\/|\\\\/)) {\n            throw new Error('relative path without a basedir');\n        }\n        \n        var xs = file.split(/\\/+|\\\\+/);\n        for (\n            var i = 0;\n            ps[i] === xs[i] && i < Math.min(ps.length, xs.length);\n            i++\n        );\n        return ps.slice(0, i);\n    }, files[0].split(/\\/+|\\\\+/));\n    \n    // Windows correctly handles paths with forward-slashes\n    return res.length > 1 ? res.join('/') : '/'\n};\n", "import commondir from 'commondir'\nimport {\n  relative,\n  dirname as patheDirname,\n  join,\n  normalize,\n  resolve,\n  basename as basenamePathe,\n  extname as extnamePathe,\n  isAbsolute,\n} from 'pathe'\nimport {fileURLToPath} from 'url'\n// eslint-disable-next-line node/prefer-global/url\nimport type {URL} from 'url'\n\n/**\n * Joins a list of paths together.\n *\n * @param paths - Paths to join.\n * @returns Joined path.\n */\nexport function joinPath(...paths: string[]): string {\n  return join(...paths)\n}\n\n/**\n * Normalizes a path.\n *\n * @param path - Path to normalize.\n * @returns Normalized path.\n */\nexport function normalizePath(path: string): string {\n  return normalize(path)\n}\n\n/**\n * Resolves a list of paths together.\n *\n * @param paths - Paths to resolve.\n * @returns Resolved path.\n */\nexport function resolvePath(...paths: string[]): string {\n  return resolve(...paths)\n}\n\n/**\n * Returns the relative path from one path to another.\n *\n * @param from - Path to resolve from.\n * @param to - Path to resolve to.\n * @returns Relative path.\n */\nexport function relativePath(from: string, to: string): string {\n  return relative(from, to)\n}\n\n/**\n * Returns whether the path is absolute.\n *\n * @param path - Path to check.\n * @returns Whether the path is absolute.\n */\nexport function isAbsolutePath(path: string): boolean {\n  return isAbsolute(path)\n}\n\n/**\n * Returns the directory name of a path.\n *\n * @param path - Path to get the directory name of.\n * @returns Directory name.\n */\nexport function dirname(path: string): string {\n  return patheDirname(path)\n}\n\n/**\n * Returns the base name of a path.\n *\n * @param path - Path to get the base name of.\n * @param ext - Optional extension to remove from the result.\n * @returns Base name.\n */\nexport function basename(path: string, ext?: string): string {\n  return basenamePathe(path, ext)\n}\n\n/**\n * Returns the extension of the path.\n *\n * @param path - Path to get the extension of.\n * @returns Extension.\n */\nexport function extname(path: string): string {\n  return extnamePathe(path)\n}\n\n/**\n * Given an absolute filesystem path, it makes it relative to\n * the current working directory. This is useful when logging paths\n * to allow the users to click on the file and let the OS open it\n * in the editor of choice.\n *\n * @param path - Path to relativize.\n * @param dir - Current working directory.\n * @returns Relativized path.\n */\nexport function relativizePath(path: string, dir: string = cwd()): string {\n  const result = commondir([path, dir])\n  const relativePath = relative(dir, path)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const relativeComponents = relativePath.split('/').filter((component) => component === '..').length\n  if (result === '/' || relativePath === '' || relativeComponents > 2) {\n    return path\n  } else {\n    return relativePath\n  }\n}\n\n/**\n * Given 2 paths, it returns whether the second path is a subpath of the first path.\n *\n * @param mainPath - The main path.\n * @param subpath - The subpath.\n * @returns Whether the subpath is a subpath of the main path.\n */\nexport function isSubpath(mainPath: string, subpath: string): boolean {\n  const relativePath = relative(mainPath, subpath)\n  return !relativePath.startsWith('..') && !isAbsolutePath(relativePath)\n}\n\n/**\n * Given a module's import.meta.url it returns the directory containing the module.\n *\n * @param moduleURL - The value of import.meta.url in the context of the caller module.\n * @returns The path to the directory containing the caller module.\n */\nexport function moduleDirectory(moduleURL: string | URL): string {\n  return dirname(fileURLToPath(moduleURL))\n}\n\n/**\n * When running a script using `npm run`, something interesting happens. If the current\n * folder does not have a `package.json` or a `node_modules` folder, npm will traverse\n * the directory tree upwards until it finds one. Then it will run the script and set\n * `process.cwd()` to that folder, while the actual path is stored in the INIT_CWD\n * environment variable (see here: https://docs.npmjs.com/cli/v9/commands/npm-run-script#description).\n *\n * @returns The path to the current working directory.\n */\nexport function cwd(): string {\n  // eslint-disable-next-line @shopify/cli/no-process-cwd\n  return normalize(process.env.INIT_CWD ? process.env.INIT_CWD : process.cwd())\n}\n\n/**\n * Tries to get the value of the `--path` argument, if provided.\n *\n * @param argv - The arguments to search for the `--path` argument.\n * @returns The value of the `--path` argument, if provided.\n */\nexport function sniffForPath(argv = process.argv): string | undefined {\n  const pathFlagIndex = argv.indexOf('--path')\n  if (pathFlagIndex === -1) {\n    const pathArg = argv.find((arg) => arg.startsWith('--path='))\n    return pathArg?.split('=')[1]\n  }\n  const pathFlag = argv[pathFlagIndex + 1]\n  if (!pathFlag || pathFlag.startsWith('-')) return\n  return pathFlag\n}\n\n/**\n * Returns whether the `--json` or `-j` flags are present in the arguments.\n *\n * @param argv - The arguments to search for the `--json` and `-j` flags.\n * @returns Whether the `--json` or `-j` flag is present in the arguments.\n */\nexport function sniffForJson(argv = process.argv): boolean {\n  return argv.includes('--json') || argv.includes('-j')\n}\n", "export { h as basename, p as default, d as delimiter, f as dirname, e as extname, g as format, i as isAbsolute, j as join, a as normalize, b as normalizeString, k as parse, c as relative, r as resolve, s as sep, t as toNamespacedPath } from './shared/pathe.ff20891b.mjs';\n", "const _DRIVE_LETTER_START_RE = /^[A-Za-z]:\\//;\nfunction normalizeWindowsPath(input = \"\") {\n  if (!input) {\n    return input;\n  }\n  return input.replace(/\\\\/g, \"/\").replace(_DRIVE_LETTER_START_RE, (r) => r.toUpperCase());\n}\n\nconst _UNC_REGEX = /^[/\\\\]{2}/;\nconst _IS_ABSOLUTE_RE = /^[/\\\\](?![/\\\\])|^[/\\\\]{2}(?!\\.)|^[A-Za-z]:[/\\\\]/;\nconst _DRIVE_LETTER_RE = /^[A-Za-z]:$/;\nconst _ROOT_FOLDER_RE = /^\\/([A-Za-z]:)?$/;\nconst sep = \"/\";\nconst delimiter = \":\";\nconst normalize = function(path) {\n  if (path.length === 0) {\n    return \".\";\n  }\n  path = normalizeWindowsPath(path);\n  const isUNCPath = path.match(_UNC_REGEX);\n  const isPathAbsolute = isAbsolute(path);\n  const trailingSeparator = path[path.length - 1] === \"/\";\n  path = normalizeString(path, !isPathAbsolute);\n  if (path.length === 0) {\n    if (isPathAbsolute) {\n      return \"/\";\n    }\n    return trailingSeparator ? \"./\" : \".\";\n  }\n  if (trailingSeparator) {\n    path += \"/\";\n  }\n  if (_DRIVE_LETTER_RE.test(path)) {\n    path += \"/\";\n  }\n  if (isUNCPath) {\n    if (!isPathAbsolute) {\n      return `//./${path}`;\n    }\n    return `//${path}`;\n  }\n  return isPathAbsolute && !isAbsolute(path) ? `/${path}` : path;\n};\nconst join = function(...arguments_) {\n  if (arguments_.length === 0) {\n    return \".\";\n  }\n  let joined;\n  for (const argument of arguments_) {\n    if (argument && argument.length > 0) {\n      if (joined === void 0) {\n        joined = argument;\n      } else {\n        joined += `/${argument}`;\n      }\n    }\n  }\n  if (joined === void 0) {\n    return \".\";\n  }\n  return normalize(joined.replace(/\\/\\/+/g, \"/\"));\n};\nfunction cwd() {\n  if (typeof process !== \"undefined\" && typeof process.cwd === \"function\") {\n    return process.cwd().replace(/\\\\/g, \"/\");\n  }\n  return \"/\";\n}\nconst resolve = function(...arguments_) {\n  arguments_ = arguments_.map((argument) => normalizeWindowsPath(argument));\n  let resolvedPath = \"\";\n  let resolvedAbsolute = false;\n  for (let index = arguments_.length - 1; index >= -1 && !resolvedAbsolute; index--) {\n    const path = index >= 0 ? arguments_[index] : cwd();\n    if (!path || path.length === 0) {\n      continue;\n    }\n    resolvedPath = `${path}/${resolvedPath}`;\n    resolvedAbsolute = isAbsolute(path);\n  }\n  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute);\n  if (resolvedAbsolute && !isAbsolute(resolvedPath)) {\n    return `/${resolvedPath}`;\n  }\n  return resolvedPath.length > 0 ? resolvedPath : \".\";\n};\nfunction normalizeString(path, allowAboveRoot) {\n  let res = \"\";\n  let lastSegmentLength = 0;\n  let lastSlash = -1;\n  let dots = 0;\n  let char = null;\n  for (let index = 0; index <= path.length; ++index) {\n    if (index < path.length) {\n      char = path[index];\n    } else if (char === \"/\") {\n      break;\n    } else {\n      char = \"/\";\n    }\n    if (char === \"/\") {\n      if (lastSlash === index - 1 || dots === 1) ; else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res[res.length - 1] !== \".\" || res[res.length - 2] !== \".\") {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(\"/\");\n            if (lastSlashIndex === -1) {\n              res = \"\";\n              lastSegmentLength = 0;\n            } else {\n              res = res.slice(0, lastSlashIndex);\n              lastSegmentLength = res.length - 1 - res.lastIndexOf(\"/\");\n            }\n            lastSlash = index;\n            dots = 0;\n            continue;\n          } else if (res.length > 0) {\n            res = \"\";\n            lastSegmentLength = 0;\n            lastSlash = index;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? \"/..\" : \"..\";\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0) {\n          res += `/${path.slice(lastSlash + 1, index)}`;\n        } else {\n          res = path.slice(lastSlash + 1, index);\n        }\n        lastSegmentLength = index - lastSlash - 1;\n      }\n      lastSlash = index;\n      dots = 0;\n    } else if (char === \".\" && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\nconst isAbsolute = function(p) {\n  return _IS_ABSOLUTE_RE.test(p);\n};\nconst toNamespacedPath = function(p) {\n  return normalizeWindowsPath(p);\n};\nconst _EXTNAME_RE = /.(\\.[^./]+)$/;\nconst extname = function(p) {\n  const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));\n  return match && match[1] || \"\";\n};\nconst relative = function(from, to) {\n  const _from = resolve(from).replace(_ROOT_FOLDER_RE, \"$1\").split(\"/\");\n  const _to = resolve(to).replace(_ROOT_FOLDER_RE, \"$1\").split(\"/\");\n  if (_to[0][1] === \":\" && _from[0][1] === \":\" && _from[0] !== _to[0]) {\n    return _to.join(\"/\");\n  }\n  const _fromCopy = [..._from];\n  for (const segment of _fromCopy) {\n    if (_to[0] !== segment) {\n      break;\n    }\n    _from.shift();\n    _to.shift();\n  }\n  return [..._from.map(() => \"..\"), ..._to].join(\"/\");\n};\nconst dirname = function(p) {\n  const segments = normalizeWindowsPath(p).replace(/\\/$/, \"\").split(\"/\").slice(0, -1);\n  if (segments.length === 1 && _DRIVE_LETTER_RE.test(segments[0])) {\n    segments[0] += \"/\";\n  }\n  return segments.join(\"/\") || (isAbsolute(p) ? \"/\" : \".\");\n};\nconst format = function(p) {\n  const segments = [p.root, p.dir, p.base ?? p.name + p.ext].filter(Boolean);\n  return normalizeWindowsPath(\n    p.root ? resolve(...segments) : segments.join(\"/\")\n  );\n};\nconst basename = function(p, extension) {\n  const lastSegment = normalizeWindowsPath(p).split(\"/\").pop();\n  return extension && lastSegment.endsWith(extension) ? lastSegment.slice(0, -extension.length) : lastSegment;\n};\nconst parse = function(p) {\n  const root = normalizeWindowsPath(p).split(\"/\").shift() || \"/\";\n  const base = basename(p);\n  const extension = extname(base);\n  return {\n    root,\n    dir: dirname(p),\n    base,\n    ext: extension,\n    name: base.slice(0, base.length - extension.length)\n  };\n};\n\nconst path = {\n  __proto__: null,\n  basename: basename,\n  delimiter: delimiter,\n  dirname: dirname,\n  extname: extname,\n  format: format,\n  isAbsolute: isAbsolute,\n  join: join,\n  normalize: normalize,\n  normalizeString: normalizeString,\n  parse: parse,\n  relative: relative,\n  resolve: resolve,\n  sep: sep,\n  toNamespacedPath: toNamespacedPath\n};\n\nexport { normalize as a, normalizeString as b, relative as c, delimiter as d, extname as e, dirname as f, format as g, basename as h, isAbsolute as i, join as j, parse as k, normalizeWindowsPath as n, path as p, resolve as r, sep as s, toNamespacedPath as t };\n"],
  "mappings": "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",
  "names": ["path", "path", "path", "dirname", "basename", "extname", "cwd", "commondir", "relativePath"]
}
